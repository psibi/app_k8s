* Introduction

This overlay implements blue green deployment using istio. There are
two applications here:

- blue application ([[https://hub.docker.com/layers/argoproj/rollouts-demo/blue/images/sha256-3225193a6415b14b3fcdd160c40248b2bfd62f8c77326480559b91a41ced6e20?context=explore][blue application]])
- green application ([[https://hub.docker.com/r/argoproj/rollouts-demo/tags?page=1&name=green][green applicaion]])

The objective is to switch the traffic from the blue environment to
the green environment once testing is complete on the green
environment.

* Pre-requisites

For this overlay to work, following components are assumed to be
installed in your k8s cluster:

- Istio
- cert-manager
- external-dns

You might want to change the hostname in the following ingresses:

- [[file:certificate.yaml][certificate.yaml]]
- [[file:bg_gateway.yaml][bg_gateway.yaml]]
- [[file:blue_virtual_service.yaml][blue_virtual_service.yaml]]
- [[file:green_virtual_service.yaml][green_virtual_service.yaml]]

* Usage

Make sure it builds fine:

#+begin_src sh
$ just build-istio-rbg-app
#+end_src

Now go ahead and deploy it:

#+begin_src
kustomize build overlays/istio_argo_rollouts_blue_green/ > istio_robg.yaml
kubectl apply -f istio_robg.yaml
namespace/app unchanged
service/blue unchanged
service/green unchanged
deployment.apps/blue unchanged
rollout.argoproj.io/blue unchanged
gateway.networking.istio.io/bg-gateway unchanged
virtualservice.networking.istio.io/blue unchanged
virtualservice.networking.istio.io/green unchanged
kubectl apply -f overlays/istio_argo_rollouts_blue_green/certificate.yaml
certificate.cert-manager.io/istio-blue-green-cert unchanged
#+end_src

* Test the applications

There are two URLs to test:

- Let's check the blue ingress

#+begin_example sh
❯ curl -s https://BLUE_REDACTED/color
"blue"
#+end_example

- And the green ingress:

#+begin_example sh
❯ curl -s https://GREEN_REDACTED/color
"blue"
#+end_example

Both of them will give blue response which is expected.

* Deploy the green application

Now we need to edit the [[file:blue_deployment.yaml][blue_deployment.yaml]] file and change the image:

       #+begin_src diff
       containers:
-      - image: docker.io/argoproj/rollouts-demo:blue
+      - image: docker.io/argoproj/rollouts-demo:green
       #+end_src

And then apply the manifests again. You can check the status now:

#+begin_src sh
❯ kubectl argo rollouts -n app get rollout blue
Name:            blue
Namespace:       app
Status:          ॥ Paused
Message:         BlueGreenPause
Strategy:        BlueGreen
Images:          docker.io/argoproj/rollouts-demo:blue (stable, active)
                 docker.io/argoproj/rollouts-demo:green (preview)
Replicas:
  Desired:       2
  Current:       4
  Updated:       2
  Ready:         2
  Available:     2

NAME                              KIND        STATUS     AGE  INFO
⟳ blue                            Rollout     ॥ Paused   51m
├──# revision:2
│  └──⧉ blue-7656cd9676           ReplicaSet  ✔ Healthy  94s  preview
│     ├──□ blue-7656cd9676-4mzrv  Pod         ✔ Running  94s  ready:2/2
│     └──□ blue-7656cd9676-jddmg  Pod         ✔ Running  94s  ready:2/2
└──# revision:1
   └──⧉ blue-679b5d66b7           ReplicaSet  ✔ Healthy  51m  stable,active
      ├──□ blue-679b5d66b7-68rc8  Pod         ✔ Running  51m  ready:2/2
      └──□ blue-679b5d66b7-fnglk  Pod         ✔ Running  51m  ready:2/2
#+end_src


#+begin_example sh
❯ curl -s https://BLUE_REDACTED/color
"blue"
#+end_example

And the green ingress:

#+begin_example sh
❯ curl -s https://GREEN_REDACTED/color
"green"
#+end_example

Now if you are happy with the green application, you can promote it
via the CLI:

#+begin_src sh
❯ kubectl argo rollouts -n app promote blue
rollout 'blue' promoted
#+end_src

And you can verify the blue application again:

#+begin_src sh
❯ curl -k https://BLUE_REDACTED/color
"green"
#+end_src

Note that the green application will be giving green since there will
be only one application present now:

#+begin_src sh
❯ curl -k https://GREEN_REDACTED/color
"green"
#+end_src

You can confirm the rollout:

#+begin_src sh
❯ kubectl argo rollouts -n app get rollout blue
Name:            blue
Namespace:       app
Status:          ✔ Healthy
Strategy:        BlueGreen
Images:          docker.io/argoproj/rollouts-demo:green (stable, active)
Replicas:
  Desired:       2
  Current:       2
  Updated:       2
  Ready:         2
  Available:     2

NAME                              KIND        STATUS        AGE    INFO
⟳ blue                            Rollout     ✔ Healthy     54m
├──# revision:2
│  └──⧉ blue-7656cd9676           ReplicaSet  ✔ Healthy     3m54s  stable,active
│     ├──□ blue-7656cd9676-4mzrv  Pod         ✔ Running     3m54s  ready:2/2
│     └──□ blue-7656cd9676-jddmg  Pod         ✔ Running     3m54s  ready:2/2
└──# revision:1
   └──⧉ blue-679b5d66b7           ReplicaSet  • ScaledDown  54m
#+end_src


* Destruction

#+begin_example sh
❯ just remove-istio-bg-app
kubectl delete -f nginx_bg.yaml
namespace "app" deleted
service "blue" deleted
service "green" deleted
deployment.apps "blue" deleted
deployment.apps "green" deleted
ingress.networking.k8s.io "blue" deleted
ingress.networking.k8s.io "green" deleted
#+end_example

* Table Of Contents                                                     :TOC:
- [[#introduction][Introduction]]
- [[#pre-requisites][Pre-requisites]]
- [[#usage][Usage]]
  - [[#canary-deployment][Canary Deployment]]
- [[#forcing-canary-behavior][Forcing Canary behavior]]
- [[#reference][Reference]]

* Introduction

This overlay implements canary deployment using NGINX
controller and Argo Rollouts. There are two applications here:

- stable application ([[https://hub.docker.com/r/argoproj/rollouts-demo/tags?page=1&name=yellow][yellow application]])
- canary application ([[https://hub.docker.com/r/argoproj/rollouts-demo/tags?page=1&name=green][green applicaion]])

The objective is to route 80% of the traffic to stable application
and the remaining one to the canary application.

* Pre-requisites

For this overlay to work, following components are assumed to be
installed in your k8s cluster:

- NGINX controller
- cert-manager
- Argo Rollouts
- [[https://argoproj.github.io/argo-rollouts/installation/#kubectl-plugin-installation][kubectl plugin for Argo rollout]]

You might want to change the hostname in the following resources:

- [[file:stable_ingress.yaml][stable_ingress.yaml]]

* Usage

Make sure it builds fine:

#+begin_src sh
$ just build-nginx-canary
#+end_src

Now let's apply it:

#+begin_example sh
kustomize build overlays/argo_rollouts_nginx_canary > argo-rollouts-nginx_canary.yaml
kubectl apply -f argo-rollouts-nginx_canary.yaml
namespace/canary unchanged
service/canary unchanged
service/prod unchanged
rollout.argoproj.io/rollouts-demo created
ingress.networking.k8s.io/prod-ingress created
#+end_example

Now your stable application would be up and running. You can even
confirm it:

#+begin_src sh :exports both
seq 10 | xargs -I{} curl -s https://REDACTED/color
#+end_src

#+RESULTS:
: yellow"yellow"yellow"yellow"yellow"yellow"yellow"yellow"yellow"yellow

** Canary Deployment

Now we want to make sure that we deploy our canary application.

We also know that this it the image of our canary application:

#+begin_example text
docker.io/argoproj/rollouts-demo:green
#+end_example

*** CLI

Let's do it via the CLI way initially. Let's check our current rollout
initially:

#+begin_src sh :results verbatim :exports both
kubectl argo rollouts -n canary get rollout rollouts-demo
#+end_src

#+RESULTS:
#+begin_example
Name:            rollouts-demo
Namespace:       canary
Status:          ✔ Healthy
Strategy:        Canary
  Step:          2/2
  SetWeight:     100
  ActualWeight:  100
Images:          docker.io/argoproj/rollouts-demo:yellow (stable)
Replicas:
  Desired:       1
  Current:       1
  Updated:       1
  Ready:         1
  Available:     1

NAME                                       KIND        STATUS        AGE  INFO
⟳ rollouts-demo                            Rollout     ✔ Healthy     40m
├──# revision:3
│  └──⧉ rollouts-demo-845cc87948           ReplicaSet  ✔ Healthy     40m  stable
│     └──□ rollouts-demo-845cc87948-rvr46  Pod         ✔ Running     40m  ready:1/1
└──# revision:2
   └──⧉ rollouts-demo-7457cfdf4f           ReplicaSet  • ScaledDown  13m
#+end_example

We can see that our stable application is running well. Now we have to
change the image for our canary version:

#+begin_src sh  :exports both
kubectl argo rollouts -n canary set image rollouts-demo prod=docker.io/argoproj/rollouts-demo:green
#+end_src

#+RESULTS:
: rollouts-demo

Now let's check the status again:

#+begin_src sh :results verbatim  :exports both
kubectl argo rollouts -n canary get rollout rollouts-demo
#+end_src

#+RESULTS:
#+begin_example
Name:            rollouts-demo
Namespace:       canary
Status:          ॥ Paused
Message:         CanaryPauseStep
Strategy:        Canary
  Step:          1/2
  SetWeight:     20
  ActualWeight:  20
Images:          docker.io/argoproj/rollouts-demo:green (canary)
                 docker.io/argoproj/rollouts-demo:yellow (stable)
Replicas:
  Desired:       1
  Current:       2
  Updated:       1
  Ready:         2
  Available:     2

NAME                                       KIND        STATUS     AGE  INFO
⟳ rollouts-demo                            Rollout     ॥ Paused   41m
├──# revision:4
│  └──⧉ rollouts-demo-7457cfdf4f           ReplicaSet  ✔ Healthy  14m  canary
│     └──□ rollouts-demo-7457cfdf4f-b27d8  Pod         ✔ Running  44s  ready:1/1
└──# revision:3
   └──⧉ rollouts-demo-845cc87948           ReplicaSet  ✔ Healthy  41m  stable
      └──□ rollouts-demo-845cc87948-rvr46  Pod         ✔ Running  41m  ready:1/1
#+end_example

So you can see that it's current status is paused. We can also see
that there are two revision. We now have 20% of our traffic being
routed to the canary application. Let's test that via curl:

#+begin_src sh :exports both
seq 12 | xargs -I{} curl -s https://REDACTED/color
#+end_src

#+RESULTS:
: yellow"yellow"yellow"yellow"green"yellow"yellow"green"yellow"yellow

As you can see we get two green colors which indicates that around
20% of the traffic is getting redirected to the newer application.

Now that the rollout is in a paused state, let's promote it to the
next stage so that the entire traffic is served by the newer
application:

#+begin_src sh :exports both
kubectl argo rollouts -n canary promote rollouts-demo
#+end_src

#+RESULTS:
: rollout 'rollouts-demo' promoted

Now let's check the rollout status:

#+begin_src sh :results verbatim  :exports both
kubectl argo rollouts -n canary get rollout rollouts-demo
#+end_src

#+RESULTS:
#+begin_example
Name:            rollouts-demo
Namespace:       canary
Status:          ✔ Healthy
Strategy:        Canary
  Step:          2/2
  SetWeight:     100
  ActualWeight:  100
Images:          docker.io/argoproj/rollouts-demo:green (stable)
Replicas:
  Desired:       1
  Current:       1
  Updated:       1
  Ready:         1
  Available:     1

NAME                                       KIND        STATUS        AGE  INFO
⟳ rollouts-demo                            Rollout     ✔ Healthy     55m
├──# revision:4
│  └──⧉ rollouts-demo-7457cfdf4f           ReplicaSet  ✔ Healthy     28m  stable
│     └──□ rollouts-demo-7457cfdf4f-b27d8  Pod         ✔ Running     14m  ready:1/1
└──# revision:3
   └──⧉ rollouts-demo-845cc87948           ReplicaSet  • ScaledDown  55m
#+end_example

Now you can confirm that the application is actually entirely switced
to the canary (green) application. You can confirm it via curl too:

#+begin_src sh  :exports both
seq 12 | xargs -I{} curl -s https://REDACTED/color
#+end_src

#+RESULTS:
: green"green"green"green"green"green"green"green"green"green

*** Manifest

Now we want to show the same process as above but we will do the
updates via k8s manifest instead of using CLI. Since we are already
having green application as stable now, we will start from there. The
objective is that we want to update it to yellow now. So let's edit
the Rollout manifest to point to the proper image and then do ~kubectl
apply~. And then let's check the rollout status:

#+begin_src sh :results verbatim  :exports both
kubectl argo rollouts -n canary get rollout rollouts-demo
#+end_src

#+RESULTS:
#+begin_example
Name:            rollouts-demo
Namespace:       canary
Status:          ॥ Paused
Message:         CanaryPauseStep
Strategy:        Canary
  Step:          1/2
  SetWeight:     20
  ActualWeight:  20
Images:          docker.io/argoproj/rollouts-demo:green (stable)
                 docker.io/argoproj/rollouts-demo:yellow (canary)
Replicas:
  Desired:       1
  Current:       2
  Updated:       1
  Ready:         2
  Available:     2

NAME                                       KIND        STATUS     AGE  INFO
⟳ rollouts-demo                            Rollout     ॥ Paused   67m
├──# revision:5
│  └──⧉ rollouts-demo-845cc87948           ReplicaSet  ✔ Healthy  67m  canary
│     └──□ rollouts-demo-845cc87948-4nsrl  Pod         ✔ Running  22s  ready:1/1
└──# revision:4
   └──⧉ rollouts-demo-7457cfdf4f           ReplicaSet  ✔ Healthy  40m  stable
      └──□ rollouts-demo-7457cfdf4f-b27d8  Pod         ✔ Running  26m  ready:1/1
#+end_example

You can see that yellow application is pointed as the canary
application. You can also confirm it's behavior:

#+begin_src sh  :exports both
seq 12 | xargs -I{} curl -s https://REDACTED/color
#+end_src

#+RESULTS:
: yellow"green"green"green"green"green"yellow"green"green"green

Now you can manually promote it via the CLI or you could use features
like canary analysis etc to bring automated progressive delivery
feature.

* Forcing Canary behavior

While testing your canary application, you might want your QA team to
always visit the canary application. To do it, we have this
configuration in the rollout:

#+begin_example yaml
additionalIngressAnnotations:   # optional
  canary-by-header: X-Canary
#+end_example

This is the current behvaior:

#+begin_src sh  :exports both
seq 12 | xargs -I{} curl -s https://REDACTED/color
#+end_src

#+RESULTS:
: green"green"green"green"yellow"green"green"green"yellow"green

Now let's use the header value to always visit the canary application:

#+begin_src sh :exports both
seq 12 | xargs -I{} curl -s --header "X-Canary: always" https://REDACTED/color
#+end_src

#+RESULTS:
: yellow"yellow"yellow"yellow"yellow"yellow"yellow"yellow"yellow"yellow

And let's say you want to force it to visit the stable application:

#+begin_src sh :exports both
seq 12 | xargs -I{} curl -s --header "X-Canary: never" https://REDACTED/color
#+end_src

#+RESULTS:
: green"green"green"green"green"green"green"green"green"green

You can also test the similar workflow in your Chrome or Firefox
browser using [[https://github.com/didierfred/SimpleModifyHeaders][SimpleModifyHeaders]] extension.

* Reference

- [[https://argoproj.github.io/argo-rollouts/getting-started/][Official docs on basic workflow]]
- [[https://argoproj.github.io/argo-rollouts/getting-started/nginx/][Official docs on NGINX based deployment]]
